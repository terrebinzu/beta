console.log("wanakana?", typeof wanakana);

let fullDictionary = [];

async function loadAllDictionaryParts() {
  const partCount = 21;

  for (let i = 1; i <= partCount; i++) {
    try {
      const res = await fetch(`jmdict-part-${i}.json`);
      const entries = await res.json();
      console.log(`‚úÖ Loaded part ${i}`, entries.length);

      // ‚úÖ Push entries into the full dictionary
      fullDictionary.push(...entries); // better loop perfomance(21 files)

    } catch (err) {
      console.error(`‚ùå Failed to load jmdict-part-${i}.json`, err);
    }
  }

  console.log("üìò Dictionary preloaded:", fullDictionary.length, "entries");
  console.log("üîç Sample entry:", fullDictionary[0]);
}

async function searchWord(userInput) {
  
  const kanaInput = wanakana.toKana(userInput);
  const kanjiInput = userInput;
 const selectedLanguage = document.getElementById("languageSelect").value;
  
  for (const entry of fullDictionary) {
    const japanese = entry.japanese || [];
    for (const form of japanese) {
      if (form.word === kanjiInput || form.reading === kanaInput) {
        const sense = entry.senses[0];
        let definitions;

        if (sense.definitions) {
          definitions = sense.definitions[selectedLanguage] || sense.definitions.en || ["No definition found."];
        } else {
          definitions = sense.english_definitions || ["No definition found."];
        }

        return {
          ...entry,
          definitions: definitions.join(", "),
          pos: sense.parts_of_speech?.join(", ") || "Unknown part of speech"
        };
      }
    }
  }

  return null; // ‚ùå Not found
}
  
function deconjugate(input) {
  const kanaInput = wanakana.toKana(input);

  // Handle Irregular Verbs
  if (kanaInput.startsWith("„Åó") && (kanaInput.endsWith("„Åæ„Åô") || kanaInput.endsWith("„Åæ„Åó„Åü") || kanaInput.endsWith("„Å™„ÅÑ") || kanaInput.endsWith("„Åü") || kanaInput.endsWith("„Å¶"))) {
    return "„Åô„Çã";
  }
  if (kanaInput.startsWith("„Åç") && (kanaInput.endsWith("„Åæ„Åô") || kanaInput.endsWith("„Åæ„Åó„Åü") || kanaInput.endsWith("„Å™„ÅÑ") || kanaInput.endsWith("„Åü") || kanaInput.endsWith("„Å¶"))) {
    return "„Åè„Çã";
  }

  // Polite Forms
  if (kanaInput.endsWith("„Åæ„Åó„Åü") || kanaInput.endsWith("„Åæ„Åô")) {
    return kanaInput.slice(0, -3) + "„Çã";
  }
  if (kanaInput.endsWith("„Åæ„Åõ„Çì„Åß„Åó„Åü") || kanaInput.endsWith("„Åæ„Åõ„Çì")) {
    return kanaInput.slice(0, -4) + "„Çã";
  }

  // Plain Past („Åü/„Å†)
  if (kanaInput.endsWith("„Å£„Åü") || kanaInput.endsWith("„Çì„Å†")) {
    return kanaInput.slice(0, -2) + "„ÅÜ"; // usually u-verbs
  }
  if (kanaInput.endsWith("„ÅÑ„Åü")) {
    return kanaInput.slice(0, -2) + "„Åè";
  }
  if (kanaInput.endsWith("„ÅÑ„Å†")) {
    return kanaInput.slice(0, -2) + "„Åê";
  }
  if (kanaInput.endsWith("„Åó„Åü")) {
    return kanaInput.slice(0, -2) + "„Åô";
  }

  // Plain Negative
  if (kanaInput.endsWith("„Å™„ÅÑ")) {
    return kanaInput.slice(0, -2) + "„Çã"; // for most ichidan
  }

  // Te-form (optional, not perfect)
  if (kanaInput.endsWith("„Å£„Å¶")) {
    return kanaInput.slice(0, -2) + "„ÅÜ"; // „ÅÜ-verb
  }
  if (kanaInput.endsWith("„Çì„Åß")) {
    return kanaInput.slice(0, -2) + "„ÇÄ"; // „ÇÄ, „Å¨, „Å∂ usually
  }
  if (kanaInput.endsWith("„ÅÑ„Å¶")) {
    return kanaInput.slice(0, -2) + "„Åè";
  }
  if (kanaInput.endsWith("„ÅÑ„Åß")) {
    return kanaInput.slice(0, -2) + "„Åê";
  }
  if (kanaInput.endsWith("„Åó„Å¶")) {
    return kanaInput.slice(0, -2) + "„Åô";
  }

  // If none matched, return original
  return kanaInput;
}

// Utilities

function saveToHistory(verb) {
  let history = JSON.parse(localStorage.getItem("conjugationHistory")) || [];
  history.unshift(verb); // Add new verb to beginning
  history = history.slice(0, 5); // Keep only latest 5
  localStorage.setItem("conjugationHistory", JSON.stringify(history));
}

function displayHistory() {
  const historyList = document.getElementById("historyList");
  historyList.innerHTML = "";
  let history = JSON.parse(localStorage.getItem("conjugationHistory")) || [];
    history.forEach(verb => {
    const li = document.createElement("li");
    li.className = "list-group-item list-group-item-action";
    li.textContent = verb;
    li.onclick = () => {
      document.getElementById("verbInput").value = verb;
      generate(); // Re-generate when clicked
    };
    historyList.appendChild(li);
  });
}

async function conjugateAndDisplay(baseForm, html) {
  const output = document.getElementById("output");

  const normalizedKana = wanakana.toKana(baseForm);
  const stripped = wanakana.stripOkurigana(baseForm);
  const baseKana = wanakana.toKana(stripped);

  const showPolite = document.getElementById("formPolite").checked;
  const showNegative = document.getElementById("formNegative").checked;
  const showPast = document.getElementById("formPast").checked;
  const showTe = document.getElementById("formTe").checked;

  const ending = normalizedKana.slice(-1);

  const uVerbStemMap = { "„ÅÜ":"„ÅÑ", "„Åè":"„Åç", "„Åê":"„Åé", "„Åô":"„Åó", "„Å§":"„Å°", "„Å¨":"„Å´", "„Å∂":"„Å≥", "„ÇÄ":"„Åø", "„Çã":"„Çä" };
  const negMap = { "„ÅÜ":"„Çè", "„Å§":"„Åü", "„Çã":"„Çâ", "„ÇÄ":"„Åæ", "„Å∂":"„Å∞", "„Å¨":"„Å™", "„Åè":"„Åã", "„Åê":"„Åå", "„Åô":"„Åï" };
  const pastMap = { "„ÅÜ":"„Å£„Åü", "„Å§":"„Å£„Åü", "„Çã":"„Å£„Åü", "„ÇÄ":"„Çì„Å†", "„Å∂":"„Çì„Å†", "„Å¨":"„Çì„Å†", "„Åè":"„ÅÑ„Åü", "„Åê":"„ÅÑ„Å†", "„Åô":"„Åó„Åü" };
  const teMap = { "„ÅÜ":"„Å£„Å¶", "„Å§":"„Å£„Å¶", "„Çã":"„Å£„Å¶", "„ÇÄ":"„Çì„Åß", "„Å∂":"„Çì„Åß", "„Å¨":"„Çì„Åß", "„Åè":"„ÅÑ„Å¶", "„Åê":"„ÅÑ„Åß", "„Åô":"„Åó„Å¶" };


  if (normalizedKana === "„Åô„Çã") {
    if (showPolite) html += `<p><strong>Polite:</strong> „Åó„Åæ„Åô</p>`;
    if (showNegative) html += `<p><strong>Negative:</strong> „Åó„Å™„ÅÑ</p>`;
    if (showPast) html += `<p><strong>Past:</strong> „Åó„Åü</p>`;
    if (showTe) html += `<p><strong>Te-form:</strong> „Åó„Å¶</p>`;
    output.innerHTML = html;
    saveToHistory(baseForm);
    displayHistory();
    return;
  }

  if (normalizedKana === "„Åè„Çã") {
    if (showPolite) html += `<p><strong>Polite:</strong> „Åç„Åæ„Åô</p>`;
    if (showNegative) html += `<p><strong>Negative:</strong> „Åì„Å™„ÅÑ</p>`;
    if (showPast) html += `<p><strong>Past:</strong> „Åç„Åü</p>`;
    if (showTe) html += `<p><strong>Te-form:</strong> „Åç„Å¶</p>`;
    output.innerHTML = html;
    saveToHistory(baseForm);
    displayHistory();
    return;
  }

  if (normalizedKana.endsWith("„Çã") && ["„ÅÑ", "„Åà"].includes(baseKana.slice(-1))) {
    const stem = baseKana;
    if (showPolite) html += `<p><strong>Polite:</strong> ${stem}„Åæ„Åô</p>`;
    if (showNegative) html += `<p><strong>Negative:</strong> ${stem}„Å™„ÅÑ</p>`;
    if (showPast) html += `<p><strong>Past:</strong> ${stem}„Åü</p>`;
    if (showTe) html += `<p><strong>Te-form:</strong> ${stem}„Å¶</p>`;
    output.innerHTML = html;
    saveToHistory(baseForm);
    displayHistory();
    return;
  }

  if (uVerbStemMap[ending]) {
    const stem = normalizedKana.slice(0, -1) + uVerbStemMap[ending];
    if (showPolite) html += `<p><strong>Polite:</strong> ${stem}„Åæ„Åô</p>`;
    if (showNegative) html += `<p><strong>Negative:</strong> ${normalizedKana.slice(0, -1)}${negMap[ending]}„Å™„ÅÑ</p>`;
    if (showPast) html += `<p><strong>Past:</strong> ${normalizedKana.slice(0, -1)}${pastMap[ending]}</p>`;
    if (showTe) html += `<p><strong>Te-form:</strong> ${normalizedKana.slice(0, -1)}${teMap[ending]}</p>`;
    output.innerHTML = html;
    saveToHistory(baseForm);
    displayHistory();
    return;
  }

  output.innerHTML = `<p>I do not know how to conjugate "${baseForm}" yet.</p>`;
}
window.generate = async function () {
  const verbInput = document.getElementById("verbInput").value.trim();
  const output = document.getElementById("output");
  const selectedLanguage = document.getElementById("languageSelect").value;
  const result = await searchWord(verbInput);
  const normalizedInput = deconjugate(verbInput); // Try deconjugation first

  // Show deconjugation notice if different
const deconjugateNotice = document.getElementById("deconjugateNotice");
if (normalizedInput !== wanakana.toKana(verbInput)) {
  deconjugateNotice.innerHTML = `üîÑ Deconjugated Input: <strong>${verbInput}</strong> ‚ûî <strong>${normalizedInput}</strong>`;
} else {
  deconjugateNotice.innerHTML = ""; // Clear if no change
}
  
  if (!result) {
    output.innerHTML = `<p>Unknown word or not dictionary form. Please enter a base-form verb.</p>`;
    return;
  }
   const dictForm = result.japanese?.[0]?.word || result.japanese?.[0]?.reading || "N/A";

 // const dictForm = result.slug;
  
let definitions; // Pick definition based on selected language
switch(selectedLanguage) {
  case "chinese":
    definitions = result.senses[0]?.chinese_definitions?.join(', ') || "";
    break;
  case "spanish":
    definitions = result.senses[0]?.spanish_definitions?.join(', ') || "";
    break;
  case "thai":
    definitions = result.senses[0]?.thai_definitions?.join(', ') || "";
    break;
     case "korean":
    definitions = result.senses[0]?.korean_definitions?.join(', ') || "";
    break;
  default:
    definitions = result.senses[0]?.english_definitions?.join(', ') || "";
}
  
  // Fallback to English if the selected language isn't available
if (!definitions) {
  
  definitions = result.senses[0]?.english_definitions.join(', ') || "No definition found.";
}
  const pos = result.senses[0]?.parts_of_speech.join(', ') || "Unknown part of speech";
  const tags = result.is_common ? 'Common word' : '';

  let html = `<p><strong>Input:</strong> ${dictForm}</p>`;
  html += `<p><strong>Part of Speech:</strong> ${pos}</p>`;
  html += `<p><strong>Definition:</strong> ${definitions}</p>`;
  if (tags) html += `<p><strong>Tag:</strong> ${tags}</p>`;

  conjugateAndDisplay(dictForm, html);
};

window.onload = async function() {
  await loadAllDictionaryParts();  // ‚Üê good place to preload dictionary
  displayHistory();
};

document.getElementById("verbInput").addEventListener("keyup", function(event) {
    if (event.key === "Enter") {
      generate();
    }
  });
  
document.getElementById("darkModeToggle").addEventListener('change', function() {
  if (this.checked) {
    document.body.classList.add("bg-dark", "text-white");
    document.getElementById("output").classList.remove("bg-white");
    document.getElementById("output").classList.add("bg-secondary");
  } else {
    document.body.classList.remove("bg-dark", "text-white");
    document.getElementById("output").classList.remove("bg-secondary");
    document.getElementById("output").classList.add("bg-white");
  }
});

